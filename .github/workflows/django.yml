name: Django CI/CD latest

on:
  push:
    branches:
      - master # Kích hoạt workflow khi có push lên nhánh 'master'
  pull_request:
    branches:
      - master # Chạy workflow khi có pull request đến nhánh 'master'

jobs:
  # Job 1: Chạy các bài kiểm thử Django
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Phiên bản Python bạn đã chọn

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage # Cài đặt coverage để đo độ bao phủ của code

      - name: Run Django migrations for test database
        # Sử dụng SQLite trong bộ nhớ cho các bài kiểm thử để tăng tốc
        run: python manage.py migrate --noinput
        env:
          DJANGO_SETTINGS_MODULE: english_web.settings
          DATABASE_URL: sqlite:///db.sqlite3

      - name: Run Django tests with coverage
        run: coverage run manage.py test && coverage report # Chạy test và hiển thị báo cáo độ bao phủ
        env:
          DJANGO_SETTINGS_MODULE: english_web.settings
          DATABASE_URL: sqlite:///db.sqlite3

      # Tùy chọn: Upload báo cáo độ bao phủ lên Codecov hoặc Coveralls
      # - name: Generate coverage XML report (if needed for Codecov/Coveralls)
      #   run: coverage xml # Tạo file coverage.xml
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }} # Cần tạo secret này trong GitHub
      #     file: ./coverage.xml

  # Job 2: Kiểm tra phong cách code (Linting)
  # Job 3: Kiểm tra bảo mật (Security Scan)
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install Bandit
        run: pip install safety
      - name: Run Bandit security scan
        # -r: recursive, -x: exclude (loại trừ thư mục ảo venv và các file migrations)
        run: safety check

  # Job 4: Build và Push Docker image
  build-docker-image:
    runs-on: ubuntu-latest
    needs: [test, security-scan] # Chỉ chạy khi test, lint, và security-scan thành công
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' # Chỉ build/push khi push lên nhánh master

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Đường dẫn đến Dockerfile của bạn (nếu ở thư mục gốc)
          file: ./Dockerfile # Đường dẫn đến Dockerfile của bạn
          push: true
          tags: |
            lequochuy2004/english4all:latest # <-- CẬP NHẬT TÊN IMAGE CỦA BẠN VÀ USERNAME DOCKER HUB
            lequochuy2004/english4all:${{ github.sha }} # Tag với SHA của commit
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 5: Triển khai (Deployment) - Tùy chọn, chỉ chạy sau khi image đã được build và push
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: [build-docker-image] # Đảm bảo image đã được build và push thành công
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/master' # Chỉ deploy khi push lên nhánh master

  #   steps:
  #     - name: SSH into server and deploy
  #       uses: appleboy/ssh-action@master # Sử dụng action SSH để kết nối đến server
  #       with:
  #         host: ${{ secrets.SSH_HOST }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }} # Private SSH key của server
  #         script: |
  #           echo "Starting deployment on server..."
  #           # Điều hướng đến thư mục dự án trên server
  #           cd /path/to/your/django/project # <-- Thay đổi bằng đường dẫn thực tế trên server
            
  #           # Kéo Docker image mới nhất từ Docker Hub
  #           docker pull lequochuy2004/english-web:latest # <-- CẬP NHẬT TÊN IMAGE CỦA BẠN
            
  #           # Dừng và xóa container cũ (nếu có)
  #           docker stop english-web-app-container || true
  #           docker rm english-web-app-container || true
            
  #           # Chạy container mới với image vừa kéo
  #           # Cổng 80 trên host ánh xạ tới cổng 8000 bên trong container (cổng mặc định của Gunicorn/Django)
  #           docker run -d --name english-web-app-container -p 80:8000 lequochuy2004/english-web:latest
            
  #           echo "Deployment complete. Check your application at http://your_server_ip"





